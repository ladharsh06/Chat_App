{"ast":null,"code":"var _createForOfIteratorHelper = require(\"C:/Users/HARSH/Downloads/CHAT_APPLICATION-main (1)/CHAT_APPLICATION-main/node_modules/@babel/runtime/helpers/createForOfIteratorHelper.js\").default;\nvar merge = require('deepmerge');\nvar he = require('he');\nvar htmlparser = require('htmlparser2');\nvar _require = require('./block-text-builder'),\n  BlockTextBuilder = _require.BlockTextBuilder;\nvar defaultFormatters = require('./formatter');\nvar _require2 = require('./helper'),\n  limitedDepthRecursive = _require2.limitedDepthRecursive,\n  set = _require2.set,\n  splitSelector = _require2.splitSelector;\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */\nvar DEFAULT_OPTIONS = {\n  baseElement: 'body',\n  decodeOptions: {\n    isAttributeValue: false,\n    strict: false\n  },\n  formatters: {},\n  limits: {\n    ellipsis: '...',\n    maxChildNodes: undefined,\n    maxDepth: undefined,\n    maxInputLength: 1 << 24 // 16_777_216\n  },\n\n  longWordSplit: {\n    forceWrapOnLimit: false,\n    wrapCharacters: []\n  },\n  preserveNewlines: false,\n  returnDomByDefault: true,\n  tables: [],\n  tags: {\n    '': {\n      format: 'inline'\n    },\n    // defaults for any other tag name\n    'a': {\n      format: 'anchor',\n      options: {\n        baseUrl: null,\n        hideLinkHrefIfSameAsText: false,\n        ignoreHref: false,\n        noAnchorUrl: true,\n        noLinkBrackets: false\n      }\n    },\n    'article': {\n      format: 'block'\n    },\n    'aside': {\n      format: 'block'\n    },\n    'blockquote': {\n      format: 'blockquote',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        trimEmptyLines: true\n      }\n    },\n    'br': {\n      format: 'lineBreak'\n    },\n    'div': {\n      format: 'block'\n    },\n    'footer': {\n      format: 'block'\n    },\n    'form': {\n      format: 'block'\n    },\n    'h1': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 3,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h2': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 3,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h3': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 3,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h4': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h5': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'h6': {\n      format: 'heading',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2,\n        uppercase: true\n      }\n    },\n    'header': {\n      format: 'block'\n    },\n    'hr': {\n      format: 'horizontalLine',\n      options: {\n        leadingLineBreaks: 2,\n        length: undefined,\n        trailingLineBreaks: 2\n      }\n    },\n    'img': {\n      format: 'image',\n      options: {\n        baseUrl: null\n      }\n    },\n    'main': {\n      format: 'block'\n    },\n    'nav': {\n      format: 'block'\n    },\n    'ol': {\n      format: 'orderedList',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'p': {\n      format: 'paragraph',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'pre': {\n      format: 'pre',\n      options: {\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'section': {\n      format: 'block'\n    },\n    'table': {\n      format: 'table',\n      options: {\n        colSpacing: 3,\n        leadingLineBreaks: 2,\n        maxColumnWidth: 60,\n        rowSpacing: 0,\n        trailingLineBreaks: 2,\n        uppercaseHeaderCells: true\n      }\n    },\n    'ul': {\n      format: 'unorderedList',\n      options: {\n        itemPrefix: ' * ',\n        leadingLineBreaks: 2,\n        trailingLineBreaks: 2\n      }\n    },\n    'wbr': {\n      format: 'wbr'\n    }\n  },\n  whitespaceCharacters: \" \\t\\r\\n\\f\\u200B\",\n  wordwrap: 80\n};\n\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { htmlToText } = require('html-to-text');\n * const text = htmlToText('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */\nfunction htmlToText(html) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options = merge(DEFAULT_OPTIONS, options, {\n    arrayMerge: function arrayMerge(destinationArray, sourceArray, mergeOptions) {\n      return sourceArray;\n    }\n  });\n  options.formatters = Object.assign({}, defaultFormatters, options.formatters);\n  handleDeprecatedOptions(options);\n  var maxInputLength = options.limits.maxInputLength;\n  if (maxInputLength && html && html.length > maxInputLength) {\n    console.warn(\"Input length \".concat(html.length, \" is above allowed limit of \").concat(maxInputLength, \". Truncating without ellipsis.\"));\n    html = html.substring(0, maxInputLength);\n  }\n  var handler = new htmlparser.DefaultHandler();\n  new htmlparser.Parser(handler, {\n    decodeEntities: false\n  }).parseComplete(html);\n  var limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk, function (dom, builder) {\n    builder.addInline(options.limits.ellipsis || '');\n  });\n  var baseElements = Array.isArray(options.baseElement) ? options.baseElement : [options.baseElement];\n  var bases = baseElements.map(function (be) {\n    return findBase(handler.dom, options, be);\n  }).filter(function (b) {\n    return b;\n  }).reduce(function (acc, b) {\n    return acc.concat(b);\n  }, []);\n  var builder = new BlockTextBuilder(options);\n  limitedWalk(bases, builder);\n  return builder.toString();\n}\n\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */\nfunction handleDeprecatedOptions(options) {\n  var tagDefinitions = Object.values(options.tags);\n  function copyFormatterOption(source, format, target) {\n    if (options[source] === undefined) {\n      return;\n    }\n    for (var _i = 0, _tagDefinitions = tagDefinitions; _i < _tagDefinitions.length; _i++) {\n      var tagDefinition = _tagDefinitions[_i];\n      if (tagDefinition.format === format) {\n        set(tagDefinition, ['options', target], options[source]);\n      }\n    }\n  }\n  copyFormatterOption('hideLinkHrefIfSameAsText', 'anchor', 'hideLinkHrefIfSameAsText');\n  copyFormatterOption('ignoreHref', 'anchor', 'ignoreHref');\n  copyFormatterOption('linkHrefBaseUrl', 'anchor', 'baseUrl');\n  copyFormatterOption('noAnchorUrl', 'anchor', 'noAnchorUrl');\n  copyFormatterOption('noLinkBrackets', 'anchor', 'noLinkBrackets');\n  copyFormatterOption('linkHrefBaseUrl', 'image', 'baseUrl');\n  copyFormatterOption('unorderedListItemPrefix', 'unorderedList', 'itemPrefix');\n  copyFormatterOption('uppercaseHeadings', 'heading', 'uppercase');\n  copyFormatterOption('uppercaseHeadings', 'table', 'uppercaseHeadings');\n  copyFormatterOption('uppercaseHeadings', 'dataTable', 'uppercaseHeadings');\n  if (options['ignoreImage']) {\n    var _iterator = _createForOfIteratorHelper(tagDefinitions),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var tagDefinition = _step.value;\n        if (tagDefinition.format === 'image') {\n          tagDefinition.format = 'skip';\n        }\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n  }\n  if (options['singleNewLineParagraphs']) {\n    var _iterator2 = _createForOfIteratorHelper(tagDefinitions),\n      _step2;\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var _tagDefinition = _step2.value;\n        if (_tagDefinition.format === 'paragraph' || _tagDefinition.format === 'pre') {\n          set(_tagDefinition, ['options', 'leadingLineBreaks'], 1);\n          set(_tagDefinition, ['options', 'trailingLineBreaks'], 1);\n        }\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n  }\n}\nfunction findBase(dom, options, baseElement) {\n  var result = null;\n  var splitTag = splitSelector(baseElement);\n  function recursiveWalk(walk, /** @type { DomNode[] } */dom) {\n    if (result) {\n      return;\n    }\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    var _iterator3 = _createForOfIteratorHelper(dom),\n      _step3;\n    try {\n      var _loop = function _loop() {\n          var elem = _step3.value;\n          if (result) {\n            return {\n              v: void 0\n            };\n          }\n          if (elem.name === splitTag.element) {\n            var documentClasses = elem.attribs && elem.attribs.class ? elem.attribs.class.split(' ') : [];\n            var documentIds = elem.attribs && elem.attribs.id ? elem.attribs.id.split(' ') : [];\n            if (splitTag.classes.every(function (val) {\n              return documentClasses.indexOf(val) >= 0;\n            }) && splitTag.ids.every(function (val) {\n              return documentIds.indexOf(val) >= 0;\n            })) {\n              result = [elem];\n              return {\n                v: void 0\n              };\n            }\n          }\n          if (elem.children) {\n            walk(elem.children);\n          }\n        },\n        _ret;\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        _ret = _loop();\n        if (_ret) return _ret.v;\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n  }\n  var limitedWalk = limitedDepthRecursive(options.limits.maxDepth, recursiveWalk);\n  limitedWalk(dom);\n  return options.returnDomByDefault ? result || dom : result;\n}\n\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */\nfunction recursiveWalk(walk, dom, builder) {\n  if (!dom) {\n    return;\n  }\n  var options = builder.options;\n  var tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n  if (tooManyChildNodes) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    dom.push({\n      data: options.limits.ellipsis,\n      type: 'text'\n    });\n  }\n  var _iterator4 = _createForOfIteratorHelper(dom),\n    _step4;\n  try {\n    for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n      var elem = _step4.value;\n      switch (elem.type) {\n        case 'text':\n          {\n            builder.addInline(he.decode(elem.data, options.decodeOptions));\n            break;\n          }\n        case 'tag':\n          {\n            var tags = options.tags;\n            var tagDefinition = tags[elem.name] || tags[''];\n            var format = options.formatters[tagDefinition.format];\n            format(elem, walk, builder, tagDefinition.options || {});\n            break;\n          }\n        default:\n          /* do nothing */\n          break;\n      }\n    }\n  } catch (err) {\n    _iterator4.e(err);\n  } finally {\n    _iterator4.f();\n  }\n  return;\n}\n\n/**\n * @deprecated Import/require `{ htmlToText }` function instead!\n * @see htmlToText\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n */\nvar fromString = function fromString(html) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return htmlToText(html, options);\n};\nmodule.exports = {\n  htmlToText: htmlToText,\n  fromString: fromString\n};","map":{"version":3,"names":["merge","require","he","htmlparser","_require","BlockTextBuilder","defaultFormatters","_require2","limitedDepthRecursive","set","splitSelector","DEFAULT_OPTIONS","baseElement","decodeOptions","isAttributeValue","strict","formatters","limits","ellipsis","maxChildNodes","undefined","maxDepth","maxInputLength","longWordSplit","forceWrapOnLimit","wrapCharacters","preserveNewlines","returnDomByDefault","tables","tags","format","options","baseUrl","hideLinkHrefIfSameAsText","ignoreHref","noAnchorUrl","noLinkBrackets","leadingLineBreaks","trailingLineBreaks","trimEmptyLines","uppercase","length","colSpacing","maxColumnWidth","rowSpacing","uppercaseHeaderCells","itemPrefix","whitespaceCharacters","wordwrap","htmlToText","html","arguments","arrayMerge","destinationArray","sourceArray","mergeOptions","Object","assign","handleDeprecatedOptions","console","warn","concat","substring","handler","DefaultHandler","Parser","decodeEntities","parseComplete","limitedWalk","recursiveWalk","dom","builder","addInline","baseElements","Array","isArray","bases","map","be","findBase","filter","b","reduce","acc","toString","tagDefinitions","values","copyFormatterOption","source","target","_i","_tagDefinitions","tagDefinition","_iterator","_createForOfIteratorHelper","_step","s","n","done","value","err","e","f","_iterator2","_step2","result","splitTag","walk","slice","_iterator3","_step3","_loop","elem","v","name","element","documentClasses","attribs","class","split","documentIds","id","classes","every","val","indexOf","ids","children","_ret","tooManyChildNodes","push","data","type","_iterator4","_step4","decode","fromString","module","exports"],"sources":["C:/Users/HARSH/Downloads/CHAT_APPLICATION-main (1)/CHAT_APPLICATION-main/node_modules/html-to-text/lib/html-to-text.js"],"sourcesContent":["const merge = require('deepmerge');\nconst he = require('he');\nconst htmlparser = require('htmlparser2');\n\nconst { BlockTextBuilder } = require('./block-text-builder');\nconst defaultFormatters = require('./formatter');\nconst { limitedDepthRecursive, set, splitSelector } = require('./helper');\n\n// eslint-disable-next-line import/no-unassigned-import\nrequire('./typedefs');\n\n\n/**\n * Default options.\n *\n * @constant\n * @type { Options }\n * @default\n * @private\n */\nconst DEFAULT_OPTIONS = {\n  baseElement: 'body',\n  decodeOptions: {\n    isAttributeValue: false,\n    strict: false\n  },\n  formatters: {},\n  limits: {\n    ellipsis: '...',\n    maxChildNodes: undefined,\n    maxDepth: undefined,\n    maxInputLength: (1 << 24) // 16_777_216\n  },\n  longWordSplit: {\n    forceWrapOnLimit: false,\n    wrapCharacters: []\n  },\n  preserveNewlines: false,\n  returnDomByDefault: true,\n  tables: [],\n  tags: {\n    '': { format: 'inline' }, // defaults for any other tag name\n    'a': {\n      format: 'anchor',\n      options: { baseUrl: null, hideLinkHrefIfSameAsText: false, ignoreHref: false, noAnchorUrl: true, noLinkBrackets: false }\n    },\n    'article': { format: 'block' },\n    'aside': { format: 'block' },\n    'blockquote': {\n      format: 'blockquote',\n      options: { leadingLineBreaks: 2, trailingLineBreaks: 2, trimEmptyLines: true }\n    },\n    'br': { format: 'lineBreak' },\n    'div': { format: 'block' },\n    'footer': { format: 'block' },\n    'form': { format: 'block' },\n    'h1': { format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    'h2': { format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    'h3': { format: 'heading', options: { leadingLineBreaks: 3, trailingLineBreaks: 2, uppercase: true } },\n    'h4': { format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    'h5': { format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    'h6': { format: 'heading', options: { leadingLineBreaks: 2, trailingLineBreaks: 2, uppercase: true } },\n    'header': { format: 'block' },\n    'hr': { format: 'horizontalLine', options: { leadingLineBreaks: 2, length: undefined, trailingLineBreaks: 2 } },\n    'img': { format: 'image', options: { baseUrl: null } },\n    'main': { format: 'block' },\n    'nav': { format: 'block' },\n    'ol': { format: 'orderedList', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    'p': { format: 'paragraph', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    'pre': { format: 'pre', options: { leadingLineBreaks: 2, trailingLineBreaks: 2 } },\n    'section': { format: 'block' },\n    'table': {\n      format: 'table',\n      options: {\n        colSpacing: 3,\n        leadingLineBreaks: 2,\n        maxColumnWidth: 60,\n        rowSpacing: 0,\n        trailingLineBreaks: 2,\n        uppercaseHeaderCells: true\n      }\n    },\n    'ul': {\n      format: 'unorderedList',\n      options: { itemPrefix: ' * ', leadingLineBreaks: 2, trailingLineBreaks: 2 }\n    },\n    'wbr': { format: 'wbr' }\n  },\n  whitespaceCharacters: ' \\t\\r\\n\\f\\u200b',\n  wordwrap: 80\n};\n\n/**\n * Convert given HTML content to plain text string.\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n *\n * @example\n * const { htmlToText } = require('html-to-text');\n * const text = htmlToText('<h1>Hello World</h1>', {\n *   wordwrap: 130\n * });\n * console.log(text); // HELLO WORLD\n */\nfunction htmlToText (html, options = {}) {\n  options = merge(\n    DEFAULT_OPTIONS,\n    options,\n    { arrayMerge: (destinationArray, sourceArray, mergeOptions) => sourceArray }\n  );\n  options.formatters = Object.assign({}, defaultFormatters, options.formatters);\n\n  handleDeprecatedOptions(options);\n\n  const maxInputLength = options.limits.maxInputLength;\n  if (maxInputLength && html && html.length > maxInputLength) {\n    console.warn(\n      `Input length ${html.length} is above allowed limit of ${maxInputLength}. Truncating without ellipsis.`\n    );\n    html = html.substring(0, maxInputLength);\n  }\n\n  const handler = new htmlparser.DefaultHandler();\n  new htmlparser.Parser(handler, { decodeEntities: false }).parseComplete(html);\n\n  const limitedWalk = limitedDepthRecursive(\n    options.limits.maxDepth,\n    recursiveWalk,\n    function (dom, builder) {\n      builder.addInline(options.limits.ellipsis || '');\n    }\n  );\n\n  const baseElements = Array.isArray(options.baseElement)\n    ? options.baseElement\n    : [options.baseElement];\n  const bases = baseElements\n    .map(be => findBase(handler.dom, options, be))\n    .filter(b => b)\n    .reduce((acc, b) => acc.concat(b), []);\n\n  const builder = new BlockTextBuilder(options);\n  limitedWalk(bases, builder);\n  return builder.toString();\n}\n\n/**\n * Map previously existing and now deprecated options to the new options layout.\n * This is a subject for cleanup in major releases.\n *\n * @param { Options } options HtmlToText options.\n */\nfunction handleDeprecatedOptions (options) {\n  const tagDefinitions = Object.values(options.tags);\n\n  function copyFormatterOption (source, format, target) {\n    if (options[source] === undefined) { return; }\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === format) {\n        set(tagDefinition, ['options', target], options[source]);\n      }\n    }\n  }\n\n  copyFormatterOption('hideLinkHrefIfSameAsText', 'anchor', 'hideLinkHrefIfSameAsText');\n  copyFormatterOption('ignoreHref', 'anchor', 'ignoreHref');\n  copyFormatterOption('linkHrefBaseUrl', 'anchor', 'baseUrl');\n  copyFormatterOption('noAnchorUrl', 'anchor', 'noAnchorUrl');\n  copyFormatterOption('noLinkBrackets', 'anchor', 'noLinkBrackets');\n\n  copyFormatterOption('linkHrefBaseUrl', 'image', 'baseUrl');\n\n  copyFormatterOption('unorderedListItemPrefix', 'unorderedList', 'itemPrefix');\n\n  copyFormatterOption('uppercaseHeadings', 'heading', 'uppercase');\n  copyFormatterOption('uppercaseHeadings', 'table', 'uppercaseHeadings');\n  copyFormatterOption('uppercaseHeadings', 'dataTable', 'uppercaseHeadings');\n\n  if (options['ignoreImage']) {\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === 'image') {\n        tagDefinition.format = 'skip';\n      }\n    }\n  }\n\n  if (options['singleNewLineParagraphs']) {\n    for (const tagDefinition of tagDefinitions) {\n      if (tagDefinition.format === 'paragraph' || tagDefinition.format === 'pre') {\n        set(tagDefinition, ['options', 'leadingLineBreaks'], 1);\n        set(tagDefinition, ['options', 'trailingLineBreaks'], 1);\n      }\n    }\n  }\n}\n\nfunction findBase (dom, options, baseElement) {\n  let result = null;\n\n  const splitTag = splitSelector(baseElement);\n\n  function recursiveWalk (walk, /** @type { DomNode[] } */ dom) {\n    if (result) { return; }\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    for (const elem of dom) {\n      if (result) { return; }\n      if (elem.name === splitTag.element) {\n        const documentClasses = elem.attribs && elem.attribs.class ? elem.attribs.class.split(' ') : [];\n        const documentIds = elem.attribs && elem.attribs.id ? elem.attribs.id.split(' ') : [];\n\n        if (\n          splitTag.classes.every(function (val) { return documentClasses.indexOf(val) >= 0; }) &&\n          splitTag.ids.every(function (val) { return documentIds.indexOf(val) >= 0; })\n        ) {\n          result = [elem];\n          return;\n        }\n      }\n      if (elem.children) { walk(elem.children); }\n    }\n  }\n\n  const limitedWalk = limitedDepthRecursive(\n    options.limits.maxDepth,\n    recursiveWalk\n  );\n\n  limitedWalk(dom);\n  return options.returnDomByDefault ? result || dom : result;\n}\n\n/**\n * Function to walk through DOM nodes and accumulate their string representations.\n *\n * @param   { RecursiveCallback } walk    Recursive callback.\n * @param   { DomNode[] }         [dom]   Nodes array to process.\n * @param   { BlockTextBuilder }  builder Passed around to accumulate output text.\n * @private\n */\nfunction recursiveWalk (walk, dom, builder) {\n  if (!dom) { return; }\n\n  const options = builder.options;\n\n  const tooManyChildNodes = dom.length > options.limits.maxChildNodes;\n  if (tooManyChildNodes) {\n    dom = dom.slice(0, options.limits.maxChildNodes);\n    dom.push({\n      data: options.limits.ellipsis,\n      type: 'text'\n    });\n  }\n\n  for (const elem of dom) {\n    switch (elem.type) {\n      case 'text': {\n        builder.addInline(he.decode(elem.data, options.decodeOptions));\n        break;\n      }\n      case 'tag': {\n        const tags = options.tags;\n        const tagDefinition = tags[elem.name] || tags[''];\n        const format = options.formatters[tagDefinition.format];\n        format(elem, walk, builder, tagDefinition.options || {});\n        break;\n      }\n      default:\n        /* do nothing */\n        break;\n    }\n  }\n\n  return;\n}\n\n/**\n * @deprecated Import/require `{ htmlToText }` function instead!\n * @see htmlToText\n *\n * @param   { string }  html           HTML content to convert.\n * @param   { Options } [options = {}] HtmlToText options.\n * @returns { string }                 Plain text string.\n * @static\n */\nconst fromString = (html, options = {}) => htmlToText(html, options);\n\nmodule.exports = {\n  htmlToText: htmlToText,\n  fromString: fromString\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}